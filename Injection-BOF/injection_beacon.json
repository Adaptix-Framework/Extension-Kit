{
  "name": "Injection-BOF",
  "description": "BOFs for process injection",
  "extensions": [
    {
      "type": "command",
      "agents": ["beacon"],

      "command": "inject-cfg",
      "description": "Inject shellcode into a target process and hijack execution via overwriting combase.dll!__guard_check_icall_fptr",
      "message": "Task: Executing DataInject-BOF by @0xLegacyy",
      "example": "inject-cfg 808 /tmp/shellcode.bin",
      "args": [
        "INT <pid>",
        "FILE <shellcode>"
      ],
      "exec": "execute bof $EXT_DIR()/_bin/inject_cfg.x64.o $PACK_BOF(INT {pid}, BYTES {shellcode})"
    },
    {
      "type": "command",
      "agents": ["beacon"],

      "command": "inject-sec",
      "description": "Injects desired shellcode into target process using section mapping",
      "message": "Task: inject shellcode (section mapping)",
      "example": "inject-sec 808 /tmp/shellcode.bin",
      "args": [
        "INT <pid>",
        "FILE <shellcode>"
      ],
      "exec": "execute bof $EXT_DIR()/_bin/inject_sec.$ARCH().o $PACK_BOF(INT {pid}, BYTES {shellcode})"
    },
    {
      "type": "command",
      "agents": ["beacon"],
      "command": "inject-migrate",
      "description": "Advanced cross-architecture process injection with automatic detection. Supports 32-bit to 64-bit and 64-bit to 32-bit migration. Falls back to process spawning when direct injection fails. Use PID 0 to spawn a new process in the current architecture.",
      "message": "Task: Cross-architecture injection with automatic target detection and fallback spawning",
      "example": "inject-migrate 808 /tmp/shellcode.bin",
      "args": [
        "INT <pid>",
        "FILE <shellcode>"
      ],
      "notes": [
        "PID 0: Spawns a new notepad.exe process and injects into it",
        "Automatic architecture detection for target process",
        "Fallback to process spawning if cross-architecture injection fails",
        "Shellcode must match target process architecture (x86 for 32-bit, x64 for 64-bit)",
        "Enhanced synchronization ensures shellcode executes before process termination"
      ],
      "exec": "execute bof $EXT_DIR()/_bin/inject_migrate.$ARCH().o $PACK_BOF(INT {pid}, BYTES {shellcode})"
    }
  ]
}